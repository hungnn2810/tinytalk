generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum RelationshipToStudent {
  FATHER
  MOTHER
  SISTER
  BROTHER
  GRANDFATHER
  GRANDMOTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum StudentStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

model Class {
  id        String    @id @default(uuid())
  name      String    @unique
  code      String    @unique
  colorCode String
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  timetables ClassTimetable[]
  students   StudentClassMap[]
  homeworks  HomeworkAssignment[]
}

model ClassTimetable {
  id        String    @id @default(uuid())
  classId   String
  dayOfWeek DayOfWeek
  startTime DateTime  @db.Time
  endTime   DateTime  @db.Time

  class Class @relation(fields: [classId], references: [id])
}

model Student {
  id          String        @id @default(uuid())
  user_id     String        @unique
  class_id    String?       @unique
  name        String        @unique
  gender      Gender
  dateOfBirth DateTime
  status      StudentStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  user    User               @relation(fields: [user_id], references: [id])
  classes StudentClassMap[]
  parents StudentParentMap[]
}

model StudentClassMap {
  studentId String
  classId   String
  student   Student @relation(fields: [studentId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])

  @@id([studentId, classId])
}

model Parent {
  id                    String                @id @default(uuid())
  name                  String
  phoneNumber           String
  relationshipToStudent RelationshipToStudent
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now())
  students              StudentParentMap[]
}

model StudentParentMap {
  studentId String
  parentId  String
  student   Student @relation(fields: [studentId], references: [id])
  parent    Parent  @relation(fields: [parentId], references: [id])

  @@id([studentId, parentId])
}

model Library {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  homeworks Homework[]
}

enum HomeworkType {
  PHENOMENON
  MULTIPLE_CHOICE
  FILLING_BLANK
  REORDER
  MATCHING
  ANSWER_QUESTION
}

model Homework {
  id          String       @id @default(uuid())
  name        String
  type        HomeworkType
  description String?
  content     Json?
  libraryId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  library     Library              @relation(fields: [libraryId], references: [id])
  assignments HomeworkAssignment[]
}

model HomeworkAssignment {
  id         String   @id @default(uuid())
  homeworkId String
  classId    String
  assignedAt DateTime @default(now())
  expireAt   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  homework Homework @relation(fields: [homeworkId], references: [id])
  class    Class    @relation(fields: [classId], references: [id])

  @@unique([homeworkId, classId])
}

/**
 * Example JSON content for Homework content field - Type: PHENOMENON
 * [
 * {
 * "word": "apple",
 * "phonetic": "/ˈæp.əl/",
 * "audioUrl": "https://cdn.example.com/audio/apple.mp3",
 * "imageUrl": "https://cdn.example.com/images/apple.png"
 * },
 * {
 * "word": "banana",
 * "phonetic": "/bəˈnɑː.nə/",
 * "audioUrl": "https://cdn.example.com/audio/banana.mp3",
 * "imageUrl": "https://cdn.example.com/images/banana.png"
 * },
 * {
 * "word": "orange",
 * "phonetic": "/ˈɒr.ɪndʒ/",
 * "audioUrl": "https://cdn.example.com/audio/orange.mp3",
 * "imageUrl": "https://cdn.example.com/images/orange.png"
 * }
 * ]
 */

/**
 * Example JSON content for Homework content field - Type: MULTIPLE_CHOICE
 * [
 * {
 * "question": "What is the capital of France?",
 * "options": ["Berlin", "Madrid", "Paris", "Rome"],
 * "correctAnswers": [1]
 * },
 * {
 * "question": "Which planet is known as the Red Planet?",
 * "options": ["Earth", "Mars", "Jupiter", "Saturn"],
 * "correctAnswers": [0, 2]
 * }
 * ]
 */

/**
 * Example JSON content for Homework content field - Type: FILLING_BLANK
 * [
 * {
 * "sentence": "The capital of Japan is ___ and the currency is ___.",
 * "answers": ["Tokyo", "Yen"]
 * },
 * {
 * "sentence": "The color of the sky is ___.",
 * "answers": ["blue"]
 * }
 * ]
 */

/**
 * Example JSON content for Homework content field - Type: REORDER
 * [
 * {
 * "instruction": "Arrange the steps to make a cup of tea.",
 * "items": ["Boil water", "Add tea leaves", "Pour into cup", "Add sugar"],
 * "correctOrder": [0, 1, 2, 3]
 * },
 * {
 * "instruction": "Arrange the planets from nearest to farthest from the Sun.",
 * "items": ["Earth", "Venus", "Mercury", "Mars"],
 * "correctOrder": [2, 1, 0, 3]
 * }
 * ]
 */

/**
 * Example JSON content for Homework content field - Type: MATCHING
 * [
 * {
 * "leftItems": ["Cat", "Dog", "Fish"],
 * "rightItems": ["Swims", "Barks", "Meows"],
 * "correctPairs": [
 * [0, 2],
 * [1, 1],
 * [2, 0]
 * ]
 * },
 * {
 * "leftItems": ["Sun", "Earth"],
 * "rightItems": ["Planet", "Star"],
 * "correctPairs": [
 * [0, 1],
 * [1, 0]
 * ]
 * }
 * ]
 */

/**
 * Example JSON content for Homework content field - Type: ANSWER_QUESTION
 * [
 * {
 * "question": "Why does the Moon appear to change shape during the month?",
 * "expectedKeywords": ["phases", "sunlight", "orbit", "Earth"]
 * },
 * {
 * "question": "What causes day and night?",
 * "expectedKeywords": ["rotation", "Earth", "axis"]
 * }
 * ]
 */
